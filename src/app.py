import telebot
import pandas as pd
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics.pairwise import cosine_similarity
import logging
import os

def download_db():
    # URL –≤–∞—à–µ–π —Ç–∞–±–ª–∏—Ü—ã —Å gid –ª–∏—Å—Ç–∞
    SPREADSHEET_URL = os.getenv("DB_URL")  # –ü–æ–ª—É—á–∞–µ–º URL –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è

    # –ò–º—è —Ñ–∞–π–ª–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
    OUTPUT_FILE = os.getenv("DB_FILE")  # –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö

    try:
        # –ü–æ–ø—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –Ω–∞–ø—Ä—è–º—É—é –≤ DataFrame
        df = pd.read_csv(SPREADSHEET_URL)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–∞–π–ª
        df.to_csv(OUTPUT_FILE, index=False, encoding="utf-8", sep=",")
        logger.info("–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤ %s", OUTPUT_FILE)
    except Exception as e:
        logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö: %s", e)

        # –ï—Å–ª–∏ —Ñ–∞–π–ª —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –æ—Å—Ç–∞–≤–ª—è–µ–º –µ–≥–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
        if os.path.exists(OUTPUT_FILE):
            logger.info("–ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ñ–∞–π–ª %s.", OUTPUT_FILE)
        else:
            logger.info("–§–∞–π–ª –¥–∞–Ω–Ω—ã—Ö –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –∏ –∑–∞–≥—Ä—É–∑–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö.")


# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∑–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
download_db()

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ CSV —Ñ–∞–π–ª–∞
try:
    logger.info("–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ñ–∞–π–ª–∞ %s", os.getenv("DB_FILE"))  # –ß—Ç–µ–Ω–∏–µ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
    movie_dataset = pd.read_csv(os.getenv("DB_FILE"))  # –ß—Ç–µ–Ω–∏–µ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
    logger.info("–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
except Exception as load_error:
    logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö: %s", load_error)
    raise

# –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –∂–∞–Ω—Ä–æ–≤ –∫ —Å—Ç—Ä–æ–∫–æ–≤–æ–º—É —Ñ–æ—Ä–º–∞—Ç—É
movie_dataset['genre'] = movie_dataset['genre'].astype('str')
logger.info("–ñ–∞–Ω—Ä—ã –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω—ã –≤ —Å—Ç—Ä–æ–∫–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç")

# –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω –∂–∞–Ω—Ä –≤ –∫–æ–ª–æ–Ω–∫–µ 'genre'
movie_dataset['genre'] = movie_dataset['genre'].apply(lambda genre_list: genre_list.split(',')[0])
logger.info("–û—Å—Ç–∞–≤–ª–µ–Ω —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω –∂–∞–Ω—Ä –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ñ–∏–ª—å–º–∞")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram-–±–æ—Ç–∞
try:
    movie_bot = telebot.TeleBot(os.getenv("BOT_TOKEN"))  # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
    logger.info("–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
except Exception as bot_init_error:
    logger.error("–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞: %s", bot_init_error)
    raise

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ—Ö–æ–∂–∏—Ö —Ñ–∏–ª—å–º–æ–≤
def find_similar_movies(movie_data, user_query_description, max_recommendations=5):
    logger.info("–ù–∞—á–∞—Ç –ø–æ–∏—Å–∫ %d –ø–æ—Ö–æ–∂–∏—Ö —Ñ–∏–ª—å–º–æ–≤", max_recommendations)
    try:
        tfidf_vectorizer = TfidfVectorizer()  # –°–æ–∑–¥–∞–µ–º –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ç–æ—Ä TF-IDF
        tfidf_matrix = tfidf_vectorizer.fit_transform(movie_data['description'])  # –ú–∞—Ç—Ä–∏—Ü–∞ TF-IDF –¥–ª—è –æ–ø–∏—Å–∞–Ω–∏–π —Ñ–∏–ª—å–º–æ–≤
        query_tfidf_vector = tfidf_vectorizer.transform([user_query_description])  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ TF-IDF
        similarity_scores = cosine_similarity(query_tfidf_vector, tfidf_matrix).flatten()  # –ö–æ—Å–∏–Ω—É—Å–Ω–æ–µ —Å—Ö–æ–¥—Å—Ç–≤–æ
        top_movie_indices = similarity_scores.argsort()[-1:-max_recommendations - 1:-1]  # –ò–Ω–¥–µ–∫—Å—ã –ø–æ—Ö–æ–∂–∏—Ö —Ñ–∏–ª—å–º–æ–≤
        logger.info("–ü–æ–∏—Å–∫ –∑–∞–≤–µ—Ä—à–µ–Ω, –Ω–∞–π–¥–µ–Ω–æ %d —Ñ–∏–ª—å–º–æ–≤", len(top_movie_indices))
        return movie_data.iloc[top_movie_indices]
    except Exception as search_error:
        logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–æ—Ö–æ–∂–∏—Ö —Ñ–∏–ª—å–º–æ–≤: %s", search_error)
        return pd.DataFrame()  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π DataFrame –ø—Ä–∏ –æ—à–∏–±–∫–µ

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@movie_bot.message_handler(content_types=['text'])
def handle_user_query(message):
    user_description_query = message.text
    logger.info("–ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: %s", user_description_query)
    try:
        similar_movies = find_similar_movies(movie_dataset, user_description_query)
        if similar_movies.empty:
            movie_bot.send_message(message.from_user.id, "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø–æ—Ö–æ–∂–∏—Ö —Ñ–∏–ª—å–º–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            logger.info("–ü–æ—Ö–æ–∂–∏—Ö —Ñ–∏–ª—å–º–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞: %s", user_description_query)
            return

        similar_movies_dict = similar_movies.to_dict()
        movie_titles = similar_movies_dict['title']
        movie_years = similar_movies_dict['year']
        movie_descriptions = similar_movies_dict['description']
        response_movies = [
            {"title": movie_titles[index], "year": movie_years[index], "description": movie_descriptions[index]} 
            for index in movie_titles
        ]
        response_text = "\n\n".join(
            f"üé¨ {movie['title']} ({movie['year']})\n{movie['description']}\n---------------"
            for movie in response_movies
        )
        movie_bot.send_message(message.from_user.id, f"–ü–æ—Ö–æ–∂–∏–µ —Ñ–∏–ª—å–º—ã:\n{response_text}")
        logger.info("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é")
    except Exception as handler_error:
        logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞: %s", handler_error)
        movie_bot.send_message(message.from_user.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
try:
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω, –æ–∂–∏–¥–∞–µ—Ç—Å—è –≤–≤–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏–π")
    movie_bot.polling(none_stop=True, interval=0)
except Exception as polling_error:
    logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: %s", polling_error)

